buildscript {
    def (major, minor, patch) = '1.18.2-forge'.tokenize('-')[0].tokenize('.')
    def mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
    def fabric = false

    project.ext.mcVersion = mcVersion
    project.ext.fabric = fabric

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = "https://maven.tterrag.com/" }
        maven { url = 'https://jitpack.io' }

        maven { url = 'https://maven.parchmentmc.org' }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true

        classpath 'org.parchmentmc:librarian:1.+'

        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

def mcVersionStr = "${(int)(mcVersion/10000)}.${(int)(mcVersion/100)%100}" + (mcVersion%100==0 ? '' : ".${mcVersion%100}")
// def jGui = project.evaluationDependsOn(":jGui:1.16.4-forge")

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'org.parchmentmc.librarian.forgegradle'

apply plugin: 'org.spongepowered.mixin'

ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, 'tmp/mixins/mixins.replaymod.refmap.json')
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'

    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
    ]
}

mixin {
    add sourceSets.main, "mixins.replaymod.refmap.json"
}

sourceCompatibility = '17'
targetCompatibility = '17'

version = project.name + '-' + rootProject.version
group= "com.replaymod"
archivesBaseName = "replaymod"

sourceSets {
    main
    api
    integrationTest {
        compileClasspath += main.runtimeClasspath + main.output
        java {
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

minecraft {
    runs {
        client {
            workingDirectory rootProject.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            arg '-mixin.config=mixins.replaymod.json'

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory rootProject.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            arg '-mixin.config=mixins.replaymod.json'

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory rootProject.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs ['-Dfml.earlyprogresswindow=false']
            args '--mod', 'replaymod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }
    }

    //mappings channel: 'snapshot', version: '20210309-1.16.4'
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
    mavenLocal()
    maven { url "https://repo.spongepowered.org/maven/" }
    maven {
        url 'https://maven.terraformersmc.com/releases/'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroupByRegex 'com\\.github\\..*'
        }
    }
    maven {
        url 'https://repo.viaversion.com'
    }
    flatDir {
        dir 'libs'
    }
}

configurations {
    // Include dep in fat jar without relocation and, when forge supports it, without exploding (TODO)
    shade
    compile.extendsFrom shade
    // Include dep in fat jar with relocation and minimization
    shadow
    compile.extendsFrom shadow

}

dependencies {
    def shadeExclusions = {
        // Cannot just add these to the shade configuration because they'd be inherited by the compile configuration then
        exclude group: 'com.google.guava', module: 'guava-jdk5'
        exclude group: 'com.google.guava', module: 'guava' // provided by MC
        exclude group: 'com.google.code.gson', module: 'gson' // provided by MC
    }

    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'
    //minecraft 'net.minecraftforge:forge:1.16.4-35.1.37'

    annotationProcessor "org.spongepowered:mixin:0.8.5"
    /*compileOnly "org.spongepowered:mixin:$mixinVersion"
    shade("org.spongepowered:mixin:$mixinVersion") { transitive = false } // deps should all be bundled with MC

    // Mixin needs these (and depends on them but for some reason that's not enough. FG, did you do that?)
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'*/

    minecraftLibrary 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    minecraftLibrary 'com.google.guava:guava:21.0'
    annotationProcessor 'com.google.guava:guava:21.0'
    minecraftLibrary 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'

    for (suffix in ['', ':natives-linux', ':natives-windows', ':natives-macos']) {
        minecraftLibrary('org.lwjgl:lwjgl-tinyexr:3.2.2' + suffix) {
            exclude group: 'org.lwjgl', module: 'lwjgl' // comes with MC
        }
    }

    minecraftLibrary 'com.googlecode.mp4parser:isoparser:1.1.7'
    minecraftLibrary 'org.apache.commons:commons-exec:1.3'
    minecraftLibrary 'com.google.apis:google-api-services-youtube:v3-rev178-1.22.0', shadeExclusions
    minecraftLibrary 'com.google.api-client:google-api-client-gson:1.20.0'
    minecraftLibrary 'com.google.api-client:google-api-client-java6:1.20.0', shadeExclusions
    minecraftLibrary 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    minecraftLibrary 'com.github.javagl.JglTF:jgltf-model:3af6de4'
    minecraftLibrary 'org.aspectj:aspectjrt:1.8.2'
    minecraftLibrary 'com.github.ReplayMod.JavaBlend:2.79.0:a0696f8'
    //minecraftLibrary "com.github.ReplayMod:ReplayStudio:21ef505"
    minecraftLibrary 'com.github.ReplayMod:lwjgl-utils:27dcd66'


    // implementation(jGui){ transitive = false } // FG 1.2 puts all MC deps into the compile configuration and we don't want to shade those
    //testCompile 'junit:junit:4.11'
    minecraftLibrary 'com.github.viaversion:opennbt:0a02214'
    minecraftLibrary 'com.github.replaymod.viaversion:viaversion-common:5c55fc0'

    minecraftLibrary 'blank:ReplayStudio:21ef505'
}

/*File configureRelocationOutput = new File(project.buildDir, 'configureRelocation')
task configureRelocation() {
    dependsOn tasks.jar
    dependsOn configurations.shadow
    outputs.file(configureRelocationOutput)
    doLast {
        def pkgs = files(configurations.shadow).filter { it.exists() }.collect {
            def tree = it.isDirectory() ? fileTree(it) : zipTree(it)
            def pkgs = [].toSet()
            tree.visit { file ->
                if (!file.directory && file.name.endsWith('.class') && file.path.contains('/')) {
                    def pkg = file.path.substring(0, file.path.lastIndexOf('/')) + '/'
                    if (pkg.startsWith('com/')) {
                        if (pkg.startsWith('com/google/')) {
                            if (!pkg.startsWith('com/google/common') && !pkg.startsWith('com/google/gson')) {
                                pkgs << pkg.substring(0, pkg.indexOf('/', 'com/google/'.length()))
                            }
                        } else if (!pkg.startsWith('com/replaymod')) {
                            pkgs << pkg.substring(0, pkg.indexOf('/', 4))
                        }
                    } else if (pkg.startsWith('net/')) {
                        if (!pkg.startsWith('net/minecraft')
                                && !pkg.startsWith('net/fabric')) {
                            pkgs << pkg.substring(0, pkg.indexOf('/', 'net/'.length()))
                        }
                    } else if (pkg.startsWith('org/')) {
                        if (pkg.startsWith('org/apache/')) {
                            if (pkg.startsWith('org/apache/commons/')) {
                                if (!pkg.startsWith('org/apache/commons/io')) {
                                    pkgs << pkg.substring(0, pkg.indexOf('/', 'org/apache/commons/'.length()))
                                }
                            } else if (!pkg.startsWith('org/apache/logging')) {
                                pkgs << pkg.substring(0, pkg.indexOf('/', 'org/apache/'.length()))
                            }
                        } else if (pkg.startsWith('org/lwjgl')) {
                            return // either bundled with MC or uses natives which we can't relocate
                        } else if (!pkg.startsWith('org/spongepowered')) {
                            pkgs << pkg.substring(0, pkg.indexOf('/', 4))
                        }
                    } else if (pkg.startsWith('it/unimi/dsi/fastutil') && mcVersion >= 11400) {
                        return // MC uses this as well
                    } else if (!pkg.startsWith('javax/')) {
                        // Note: we cannot just use top level packages as those will be too generic and we'll run
                        // into this long standing bug: https://github.com/johnrengelman/shadow/issues/232
                        def i = pkg.indexOf('/')
                        def i2 = pkg.indexOf('/', i + 1)
                        if (i2 > 0) {
                            pkgs << pkg.substring(0, i2)
                        }
                    }
                }
            }
            pkgs
        }.flatten().unique()
        configureRelocationOutput.write(pkgs.join('\n'))
    }
}*/

// tasks.removeByName('shadowJar') // we want to base our shadowed jar on the reobfJar output, not the sourceSet output
/*tasks.whenTaskAdded { task ->
    if(task.name.contains('shadowJar')) {
        System.out.println(task + "is disabled")
        task.enabled = false
    }
}*/

/*task jarCustom(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    classifier 'shadow'
    from { new File(project.buildDir, 'reobfJar/output.jar') }

    dependsOn { tasks.configureRelocation }
    dependsOn { tasks.reobfJar }

    manifest.inheritFrom tasks.jar.manifest

    configurations = [project.configurations.shadow]
    // from { project.configurations.shade }

    inputs.file configureRelocationOutput

    // No need to shadow netty, MC provides it
    // (actually, pre-1.12 ships a netty which is too old, so we need to shade it there anyway)
    relocate 'io.netty', 'io.netty'

    exclude 'com/github/steveice10/netty/**'
    exclude 'it/unimi/dsi/fastutil/**'
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'

    minimize {
        exclude(dependency('.*spongepowered:mixin:.*'))
    }

    doFirst {
        new File(project.buildDir, 'configureRelocation').readLines().each { pkg ->
            def pkgName = pkg.replace('/', '.')
            relocate pkgName, 'com.replaymod.lib.' + pkgName
        }
    }
}
tasks.assemble.dependsOn tasks.jarCustom*/

jar {
    classifier = 'raw'

    from files(project.mixinRefMap.canonicalPath)
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLAT': 'replaymod_at.cfg',
                'MixinConfigs': 'mixins.replaymod.json'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', { project.version }
    inputs.property 'mcversion', { mcVersionStr }

    // replace stuff in mcmod.info (forge) and fabric.mod.json, nothing else
    filesMatching(['mcmod.info', 'fabric.mod.json']) {
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': mcVersionStr
    }

    // strip comments from (strict) JSON files
    filesMatching('pack.mcmeta') {
        filter { line -> line.trim().startsWith('//') ? '' : line}
    }

    // exclude mod meta for non-applicable loader
    exclude 'fabric.mod.json'
}

defaultTasks 'build'
