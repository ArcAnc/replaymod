buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = "https://maven.tterrag.com/" }
        maven { url = 'https://jitpack.io' }

        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'

    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = "com.replaymod"
version = rootProject.version + '-1182.0'

java {
    archivesBaseName = 'replaymod'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'replaymod'

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'replaymod'

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'replaymod'

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'replaymod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                replaymod {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.replaymod.refmap.json"

    config "mixins.replaymod.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://repo.spongepowered.org/maven/" }
    maven {
        url 'https://maven.terraformersmc.com/releases/'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroupByRegex 'com\\.github\\..*'
        }
    }
    maven {
        url 'https://repo.viaversion.com'
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    minecraftLibrary 'com.googlecode.mp4parser:isoparser:1.1.7'
    minecraftLibrary 'org.apache.commons:commons-exec:1.3'

    minecraftLibrary 'com.google.apis:google-api-services-youtube:v3-rev222-1.25.0'
    //minecraftLibrary 'com.google.api-client:google-api-client-gson:1.20.0'
    minecraftLibrary 'com.google.api-client:google-api-client-java6:2.1.4'

    minecraftLibrary 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    minecraftLibrary 'com.github.javagl.JglTF:jgltf-model:3af6de4'
    minecraftLibrary 'org.aspectj:aspectjrt:1.8.2'
    minecraftLibrary 'com.github.ReplayMod.JavaBlend:2.79.0:a0696f8'
    minecraftLibrary 'com.github.ReplayMod:lwjgl-utils:27dcd66'

    minecraftLibrary 'com.github.viaversion:opennbt:0a02214'
    minecraftLibrary 'com.github.replaymod.viaversion:viaversion-common:5c55fc0'

    minecraftLibrary 'blank:ReplayStudio:21ef505'

    minecraftLibrary 'org.lwjgl:lwjgl-tinyexr:3.2.2'
    minecraftLibrary 'com.github.steveice10:packetlib:2.1'
    minecraftLibrary 'com.github.replaymod.viaversion:viaversion-common:5c55fc0'
    minecraftLibrary 'io.netty:netty-all:4.1.89.Final'
    minecraftLibrary 'com.github.steveice10:packetlib:1.3'
}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "replaymod",
                //"Specification-Vendor": "replaymod authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "replaymod authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLAT': 'replaymod_at.cfg'
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
